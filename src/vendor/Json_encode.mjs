// Generated by ReScript, PLEASE EDIT WITH CARE

import * as List from "rescript/lib/es6/list.js";
import * as $$Array from "rescript/lib/es6/array.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as $$String from "rescript/lib/es6/string.js";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";

function $$char(c) {
  return $$String.make(1, c);
}

function date(d) {
  return d.toJSON();
}

function nullable(encode, v) {
  if (v !== undefined) {
    return Curry._1(encode, Caml_option.valFromOption(v));
  } else {
    return null;
  }
}

function withDefault(d, encode, v) {
  if (v !== undefined) {
    return Curry._1(encode, Caml_option.valFromOption(v));
  } else {
    return d;
  }
}

function dict(encode, d) {
  var pairs = Js_dict.entries(d);
  return Js_dict.fromArray($$Array.map((function (param) {
                    return [
                            param[0],
                            Curry._1(encode, param[1])
                          ];
                  }), pairs));
}

var object_ = Js_dict.fromList;

var array = $$Array.map;

function list(encode, l) {
  return $$Array.of_list(List.map(encode, l));
}

function pair(encodeA, encodeB, param) {
  return [
          Curry._1(encodeA, param[0]),
          Curry._1(encodeB, param[1])
        ];
}

function tuple3(encodeA, encodeB, encodeC, param) {
  return [
          Curry._1(encodeA, param[0]),
          Curry._1(encodeB, param[1]),
          Curry._1(encodeC, param[2])
        ];
}

function tuple4(encodeA, encodeB, encodeC, encodeD, param) {
  return [
          Curry._1(encodeA, param[0]),
          Curry._1(encodeB, param[1]),
          Curry._1(encodeC, param[2]),
          Curry._1(encodeD, param[3])
        ];
}

var tuple2 = pair;

export {
  $$char ,
  date ,
  nullable ,
  withDefault ,
  pair ,
  tuple2 ,
  tuple3 ,
  tuple4 ,
  dict ,
  object_ ,
  array ,
  list ,
  
}
/* No side effect */
