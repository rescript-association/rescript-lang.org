// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "./Icon.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";

function SearchBox(Props) {
  var completionValuesOpt = Props.completionValues;
  var value = Props.value;
  var onClear = Props.onClear;
  var placeholderOpt = Props.placeholder;
  var onValueChange = Props.onValueChange;
  var completionValues = completionValuesOpt !== undefined ? completionValuesOpt : [];
  var placeholder = placeholderOpt !== undefined ? placeholderOpt : "";
  var match = React.useState(function () {
        return /* Inactive */1;
      });
  var setState = match[1];
  var state = match[0];
  var textInput = React.useRef(null);
  var onMouseDownClear = function (evt) {
    evt.preventDefault();
    Curry._1(onClear, undefined);
  };
  var onAreaFocus = function (evt) {
    var el = evt.target;
    var isDiv = (el.type == null);
    if (isDiv && state === /* Inactive */1) {
      return Belt_Option.forEach(Caml_option.nullable_to_opt(textInput.current), (function (el) {
                    el.focus();
                  }));
    }
    
  };
  var onFocus = function (param) {
    Curry._1(setState, (function (param) {
            return /* Active */0;
          }));
  };
  var onBlur = function (param) {
    Curry._1(setState, (function (param) {
            return /* Inactive */1;
          }));
  };
  var onKeyDown = function (evt) {
    var key = evt.key;
    var ctrlKey = evt.ctrlKey;
    var full = (
      ctrlKey ? "CTRL+" : ""
    ) + key;
    switch (full) {
      case "Escape" :
          return Curry._1(onClear, undefined);
      case "Tab" :
          if (completionValues.length !== 1) {
            return ;
          }
          var targetValue = Belt_Array.getExn(completionValues, 0);
          if (targetValue !== value) {
            evt.preventDefault();
            return Curry._1(onValueChange, targetValue);
          } else {
            return ;
          }
      default:
        return ;
    }
  };
  var onChange = function (evt) {
    evt.preventDefault();
    Curry._1(onValueChange, evt.target.value);
  };
  return React.createElement("div", {
              className: (
                state === /* Active */0 ? "border-fire" : "border-fire-30"
              ) + " flex items-center border rounded-lg py-4 px-5",
              tabIndex: -1,
              onFocus: onAreaFocus,
              onBlur: onBlur
            }, React.createElement(Icon.MagnifierGlass.make, {
                  className: (
                    state === /* Active */0 ? "text-fire" : "text-fire-70"
                  ) + " w-4 h-4"
                }), React.createElement("input", {
                  ref: textInput,
                  className: "text-16 outline-none ml-4 w-full",
                  placeholder: placeholder,
                  type: "text",
                  value: value,
                  onKeyDown: onKeyDown,
                  onFocus: onFocus,
                  onChange: onChange
                }), React.createElement("button", {
                  className: value === "" ? "hidden" : "block",
                  onFocus: onFocus,
                  onMouseDown: onMouseDownClear
                }, React.createElement(Icon.Close.make, {
                      className: "w-4 h-4 text-fire"
                    })));
}

var make = SearchBox;

export {
  make ,
}
/* Icon Not a pure module */
