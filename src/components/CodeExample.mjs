// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Icon from "./Icon.mjs";
import * as Next from "../bindings/Next.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as LzString from "lz-string";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as HighlightJs from "../common/HighlightJs.mjs";

function langShortname(lang) {
  switch (lang) {
    case "bash" :
        return "sh";
    case "ocaml" :
        return "ml";
    case "reason" :
    case "reasonml" :
        return "re";
    case "text" :
        return "";
    default:
      return lang;
  }
}

var copyToClipboard = (function(str) {
    try {
      const el = document.createElement('textarea');
      el.value = str;
      el.setAttribute('readonly', '');
      el.style.position = 'absolute';
      el.style.left = '-9999px';
      document.body.appendChild(el);
      const selected =
        document.getSelection().rangeCount > 0 ? document.getSelection().getRangeAt(0) : false;
        el.select();
        document.execCommand('copy');
        document.body.removeChild(el);
        if (selected) {
          document.getSelection().removeAllRanges();
          document.getSelection().addRange(selected);
        }
        return true;
      } catch(e) {
        return false;
      }
    });

function CodeExample$CopyButton(Props) {
  var code = Props.code;
  var match = React.useState(function () {
        return /* Init */0;
      });
  var setState = match[1];
  var state = match[0];
  var buttonRef = React.useRef(null);
  var onClick = function (evt) {
    evt.preventDefault();
    if (copyToClipboard(code)) {
      return Curry._1(setState, (function (param) {
                    return /* Copied */1;
                  }));
    } else {
      return Curry._1(setState, (function (param) {
                    return /* Failed */2;
                  }));
    }
  };
  React.useEffect((function () {
          if (state !== 1) {
            return ;
          }
          var buttonEl = Belt_Option.getExn(Caml_option.nullable_to_opt(buttonRef.current));
          var bannerEl = document.createElement("div");
          bannerEl.className = "opacity-0 absolute -top-6 right-0 -mt-5 -mr-4 px-4 py-2 w-40 rounded-lg captions text-white bg-gray-100 text-gray-80-tr transition-all duration-1000 ease-in-out ";
          var textNode = document.createTextNode("Copied to clipboard");
          bannerEl.appendChild(textNode);
          buttonEl.appendChild(bannerEl);
          var nextFrameId = window.requestAnimationFrame(function (param) {
                bannerEl.classList.toggle("opacity-0");
                bannerEl.classList.toggle("opacity-100");
              });
          var timeoutId = setTimeout((function (param) {
                  buttonEl.removeChild(bannerEl);
                  Curry._1(setState, (function (param) {
                          return /* Init */0;
                        }));
                }), 3000);
          return (function (param) {
                    window.cancelAnimationFrame(nextFrameId);
                    clearTimeout(timeoutId);
                  });
        }), [state]);
  return React.createElement("button", {
              ref: buttonRef,
              className: "relative",
              disabled: state === /* Copied */1,
              onClick: onClick
            }, React.createElement(Icon.Clipboard.make, {
                  className: "text-gray-30 mt-px hover:cursor-pointer hover:text-gray-60 hover:bg-gray-30 w-6 h-6 p-1 rounded transition-all duration-300 ease-in-out"
                }));
}

function CodeExample(Props) {
  var highlightedLinesOpt = Props.highlightedLines;
  var code = Props.code;
  var showLabelOpt = Props.showLabel;
  var langOpt = Props.lang;
  var highlightedLines = highlightedLinesOpt !== undefined ? highlightedLinesOpt : [];
  var showLabel = showLabelOpt !== undefined ? showLabelOpt : true;
  var lang = langOpt !== undefined ? langOpt : "text";
  var children = HighlightJs.renderHLJS(highlightedLines, undefined, code, lang, undefined);
  var label;
  if (showLabel) {
    var label$1 = langShortname(lang);
    label = React.createElement("div", {
          className: "absolute right-0 px-4 pb-4 font-sans text-12 font-bold text-gray-30"
        }, label$1.toUpperCase());
  } else {
    label = null;
  }
  return React.createElement("div", {
              className: "relative w-full flex-col rounded-none xs:rounded border-t border-b xs:border border-gray-20 bg-gray-10 py-2 text-gray-80"
            }, label, React.createElement("div", {
                  className: "px-5 text-14 pt-4 pb-2 overflow-x-auto -mt-2"
                }, children));
}

function CodeExample$Toggle(Props) {
  var tabs = Props.tabs;
  var match = React.useState(function () {
        return 0;
      });
  var setSelected = match[1];
  var selected = match[0];
  if (tabs.length !== 1) {
    var numberOfItems = tabs.length;
    var tabElements = Belt_Array.mapWithIndex(tabs, (function (i, tab) {
            var label = tab.label;
            var label$1;
            if (label !== undefined) {
              label$1 = label;
            } else {
              var lang = tab.lang;
              label$1 = lang !== undefined ? langShortname(lang).toUpperCase() : String(i);
            }
            var activeClass = selected === i ? "font-medium text-12 text-gray-40 bg-gray-5 border-t-2 first:border-l" : "font-medium text-12 hover:text-gray-60 border-t-2 bg-gray-20 hover:cursor-pointer";
            var onClick = function (evt) {
              evt.preventDefault();
              Curry._1(setSelected, (function (param) {
                      return i;
                    }));
            };
            var key = label$1 + ("-" + String(i));
            var paddingX = numberOfItems >= 3 ? (
                numberOfItems >= 4 ? "" : "lg:px-8"
              ) : (
                numberOfItems > 0 ? "sm:px-4" : ""
              );
            var borderColor = selected === i ? "#696B7D #EDF0F2" : "transparent";
            return React.createElement("span", {
                        key: key,
                        className: paddingX + (" flex-none px-5 inline-block p-1 first:rounded-tl " + activeClass),
                        style: {
                          borderColor: borderColor
                        },
                        onClick: onClick
                      }, label$1);
          }));
    var children = Belt_Option.getWithDefault(Belt_Option.map(Belt_Array.get(tabs, selected), (function (tab) {
                var lang = Belt_Option.getWithDefault(tab.lang, "text");
                return HighlightJs.renderHLJS(tab.highlightedLines, undefined, tab.code, lang, undefined);
              })), null);
    var tab = tabs.find(function (tab) {
          var match = tab.lang;
          if (match === undefined) {
            return false;
          }
          switch (match) {
            case "res" :
            case "rescript" :
                return true;
            default:
              return false;
          }
        });
    var buttonDiv;
    if (tab !== undefined && tab.code !== "") {
      var playgroundLinkButton = React.createElement(Next.Link.make, {
            href: "/try?code=" + LzString.compressToEncodedURIComponent(tab.code) + "}",
            children: React.createElement("a", {
                  target: "_blank"
                }, React.createElement(Icon.ExternalLink.make, {
                      className: "text-gray-30 mt-px hover:cursor-pointer hover:text-gray-60 hover:bg-gray-30 w-6 h-6 p-1 rounded transition-all duration-300 ease-in-out"
                    }))
          });
      var copyButton = React.createElement(CodeExample$CopyButton, {
            code: tab.code
          });
      buttonDiv = React.createElement("div", {
            className: "flex items-center justify-end h-full pr-4 space-x-2"
          }, playgroundLinkButton, copyButton);
    } else {
      buttonDiv = null;
    }
    return React.createElement("div", {
                className: "relative pt-6 w-full rounded-none text-gray-80"
              }, React.createElement("div", {
                    className: "absolute flex w-full font-sans bg-transparent text-14 text-gray-40 ",
                    style: {
                      marginTop: "-26px"
                    }
                  }, React.createElement("div", {
                        className: "flex ml-2 xs:ml-0"
                      }, tabElements), React.createElement("div", {
                        className: "flex-1 w-full bg-gray-20 border-b rounded-tr border-gray-20 items-center"
                      }, buttonDiv)), React.createElement("div", {
                    className: "px-4 lg:px-5 text-14 pb-4 pt-4 overflow-x-auto bg-gray-10 border-gray-20 xs:rounded-b border"
                  }, React.createElement("pre", undefined, children)));
  }
  var tab$1 = tabs[0];
  return CodeExample({
              highlightedLines: tab$1.highlightedLines,
              code: tab$1.code,
              lang: tab$1.lang,
              showLabel: true
            });
}

var Toggle = {
  make: CodeExample$Toggle
};

var make = CodeExample;

export {
  make ,
  Toggle ,
}
/* Icon Not a pure module */
