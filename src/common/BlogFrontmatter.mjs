// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Js_null from "rescript/lib/es6/js_null.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Json_decode from "../vendor/Json_decode.mjs";
import * as Caml_exceptions from "rescript/lib/es6/caml_exceptions.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";

var authors = [
  {
    username: "hongbo",
    fullname: "Hongbo Zhang",
    role: "Compiler & Build System",
    imgUrl: "https://pbs.twimg.com/profile_images/1369548222314598400/E2y46vrB_400x400.jpg",
    twitter: "bobzhang1988"
  },
  {
    username: "chenglou",
    fullname: "Cheng Lou",
    role: "Syntax & Tools",
    imgUrl: "https://pbs.twimg.com/profile_images/554199709909131265/Y5qUDaCB_400x400.jpeg",
    twitter: "_chenglou"
  },
  {
    username: "maxim",
    fullname: "Maxim Valcke",
    role: "Syntax Lead",
    imgUrl: "https://pbs.twimg.com/profile_images/970271048812974080/Xrr8Ob6J_400x400.jpg",
    twitter: "_binary_search"
  },
  {
    username: "ryyppy",
    fullname: "Patrick Ecker",
    role: "Documentation",
    imgUrl: "https://pbs.twimg.com/profile_images/1388426717006544897/B_a7D4GF_400x400.jpg",
    twitter: "ryyppy"
  },
  {
    username: "rickyvetter",
    fullname: "Ricky Vetter",
    role: "ReScript & React",
    imgUrl: "https://pbs.twimg.com/profile_images/541111032207273984/DGsZmmfr_400x400.jpeg",
    twitter: "rickyvetter"
  },
  {
    username: "made_by_betty",
    fullname: "Bettina Steinbrecher",
    role: "Brand / UI / UX",
    imgUrl: "https://pbs.twimg.com/profile_images/1366785342704136195/3IGyRhV1_400x400.jpg",
    twitter: "made_by_betty"
  },
  {
    username: "rescript-team",
    fullname: "ReScript Team",
    role: "Core Development",
    imgUrl: "https://pbs.twimg.com/profile_images/1358354824660541440/YMKNWE1V_400x400.png",
    twitter: "rescriptlang"
  },
  {
    username: "rescript-association",
    fullname: "ReScript Association",
    role: "Foundation",
    imgUrl: "https://pbs.twimg.com/profile_images/1045362176117100545/MioTQoTp_400x400.jpg",
    twitter: "ReScriptAssoc"
  }
];

function toString(c) {
  switch (c) {
    case /* Release */0 :
        return "Release";
    case /* Testing */1 :
        return "Testing";
    case /* Preview */2 :
        return "Preview";
    case /* Roadmap */3 :
        return "Roadmap";
    
  }
}

var Badge = {
  toString: toString
};

function decodeBadge(str) {
  var str$1 = str.toLowerCase();
  switch (str$1) {
    case "preview" :
        return /* Preview */2;
    case "release" :
        return /* Release */0;
    case "roadmap" :
        return /* Roadmap */3;
    case "testing" :
        return /* Testing */1;
    default:
      throw {
            RE_EXN_ID: Json_decode.DecodeError,
            _1: "Unknown category \"" + str$1 + "\"",
            Error: new Error()
          };
  }
}

var AuthorNotFound = /* @__PURE__ */Caml_exceptions.create("BlogFrontmatter.AuthorNotFound");

function decodeAuthor(fieldName, authors, username) {
  var author = authors.find(function (a) {
        return a.username === username;
      });
  if (author !== undefined) {
    return author;
  }
  throw {
        RE_EXN_ID: AuthorNotFound,
        _1: "Couldn't find author \"" + username + "\" in field " + fieldName,
        Error: new Error()
      };
}

function authorDecoder(fieldName, authors, json) {
  var multiple = function (j) {
    return Belt_Array.map(Json_decode.array(Json_decode.string, j), (function (param) {
                  return decodeAuthor(fieldName, authors, param);
                }));
  };
  var single = function (j) {
    return [decodeAuthor(fieldName, authors, Json_decode.string(j))];
  };
  return Json_decode.either(single, multiple)(json);
}

function decode(json) {
  var fm;
  try {
    fm = {
      author: decodeAuthor("author", authors, Json_decode.field("author", Json_decode.string, json)),
      co_authors: Belt_Option.getWithDefault(Json_decode.optional((function (param) {
                  return Json_decode.field("co-authors", (function (param) {
                                return authorDecoder("co-authors", authors, param);
                              }), param);
                }), json), []),
      date: Json_decode.field("date", Json_decode.string, json),
      previewImg: Js_null.fromOption(Json_decode.optional((function (param) {
                  return Json_decode.field("previewImg", Json_decode.string, param);
                }), json)),
      articleImg: Js_null.fromOption(Json_decode.optional((function (param) {
                  return Json_decode.field("articleImg", Json_decode.string, param);
                }), json)),
      title: Json_decode.field("title", Json_decode.string, json),
      badge: Js_null.fromOption(Json_decode.optional((function (j) {
                  return decodeBadge(Json_decode.field("badge", Json_decode.string, j));
                }), json)),
      description: Json_decode.nullable((function (param) {
              return Json_decode.field("description", Json_decode.string, param);
            }), json)
    };
  }
  catch (raw_str){
    var str = Caml_js_exceptions.internalToOCamlException(raw_str);
    if (str.RE_EXN_ID === Json_decode.DecodeError) {
      return {
              TAG: 1,
              _0: str._1,
              [Symbol.for("name")]: "Error"
            };
    }
    if (str.RE_EXN_ID === AuthorNotFound) {
      return {
              TAG: 1,
              _0: str._1,
              [Symbol.for("name")]: "Error"
            };
    }
    throw str;
  }
  return {
          TAG: 0,
          _0: fm,
          [Symbol.for("name")]: "Ok"
        };
}

export {
  authors ,
  Badge ,
  decodeBadge ,
  AuthorNotFound ,
  decodeAuthor ,
  authorDecoder ,
  decode ,
  
}
/* No side effect */
